name: truyenhot_backend_autodeploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      log_file: ${{ steps.deploy.outputs.log_file }}
      commit_message: ${{ steps.get_commit_message.outputs.commit_message }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get Commit Message
        id: get_commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "::set-output name=commit_message::$COMMIT_MESSAGE"

      - name: Set up SSH
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to server
        id: deploy
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "Deploying..." > deploy.log
          sshpass -p "$SSH_PASSWORD" ssh $SSH_USER@$SSH_HOST << EOF >> deploy.log 2>&1
            cd /var/www/truyenhot_BE || { echo "Failed to change directory"; exit 1; }
            # Pull từ git về 
            git checkout -- yarn.lock || { echo "Failed to checkout yarn.lock"; exit 1; }
            git pull || { echo "Failed to pull latest changes"; exit 1; }

            # Cài đặt các dependencies
            yarn install || { echo "Failed to install dependencies"; exit 1; }
            yarn build || { echo "Failed to build project"; exit 1; }

            # Check process
            if pm2 list | grep -q 'truyenhot-backend'; then
              echo "Dừng và xoá process..."
              pm2 stop truyenhot-backend || { echo "Failed to stop PM2 process"; exit 1; }
              pm2 delete truyenhot-backend || { echo "Failed to delete PM2 process"; exit 1; }
            else
              echo "Không có process hoạt động."
            fi

            # Chạy pm2
            pm2 start ./ecosystem.config.js --env production || { echo "Khởi chạy process pm2 thất bại!"; exit 1; }

            echo 'Deploy thành công!'
          EOF
          echo "::set-output name=log_file::$(pwd)/deploy.log"

  notify_success:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: Install dependencies
        run: |
          npm install moment-timezone

      - name: Notify Discord Success
        uses: actions/github-script@v7
        with:
          script: |
            const fetch = require('node-fetch');
            const moment = require('moment-timezone');
            const now = moment().tz('Asia/Ho_Chi_Minh').format('YYYY-MM-DD HH:mm:ss'); // Múi giờ Hà Nội
            const {DISCORD_WEBHOOK_URL, GITHUB_ACTOR, COMMIT_MESSAGE} = process.env;
            const message = {
              content: `**Project:** truyenhot-backend\n**Commit Message:** *"${COMMIT_MESSAGE}"*\n**Status:** *"Success"*\n**Date:** ${now}\n**Message:** *"${GITHUB_ACTOR} đã deploy thành công."*`
            };
            await fetch(DISCORD_WEBHOOK_URL, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(message)
            });
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_ACTOR: ${{ github.actor }}
          COMMIT_MESSAGE: ${{ needs.deploy.outputs.commit_message }}

  notify_fail:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    steps:
      - name: Read Deploy Log
        id: read_log
        run: |
          cat ${{ needs.deploy.outputs.log_file }}
          echo "::set-output name=deploy_log::$(cat ${{ needs.deploy.outputs.log_file }})"

      - name: Install dependencies
        run: |
          npm install moment-timezone

      - name: Notify Discord Failure
        uses: actions/github-script@v7
        with:
          script: |
            const moment = require('moment-timezone');
            const now = moment().tz('Asia/Ho_Chi_Minh').format('YYYY-MM-DD HH:mm:ss'); // Múi giờ Hà Nội
            const {DISCORD_WEBHOOK_URL, GITHUB_ACTOR, DEPLOY_LOG, COMMIT_MESSAGE} = process.env;
            const message = {
              content: `**Project:** truyenhot-backend\n**Commit Message:** *"${COMMIT_MESSAGE}"*\n**Status:** *"Fail"*\n**Date:** ${now}\n**Message:** *"${GITHUB_ACTOR} đã gặp lỗi khi deploy."*\n**Error Info:** \`\`\`${DEPLOY_LOG}\`\`\``
            };
            await fetch(DISCORD_WEBHOOK_URL, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(message)
            });
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_ACTOR: ${{ github.actor }}
          DEPLOY_LOG: ${{ steps.read_log.outputs.deploy_log }}
          COMMIT_MESSAGE: ${{ needs.deploy.outputs.commit_message }}
